<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1418513956306">{:repl-history {:ide [], :local [&quot;(parse-page \&quot;http://habrahabr.ru\&quot;)&quot; &quot;(parse-page \&quot;resources\\\\count-urls.html\&quot;)&quot; &quot;(parse-page (read-urls \&quot;resources\\\\count-urls.html\&quot;))&quot; &quot;(parse-page (read-local-fl \&quot;resources\\\\count-urls.html\&quot;))&quot; &quot;(parse-page (slurp \&quot;resources\\\\count-urls.html\&quot;))&quot; &quot;(count )&quot; &quot;(count (parse-page (slurp \&quot;resources\\\\count-urls.html\&quot;)))&quot; &quot;(count (parse-page (read-remote-fl \&quot;http://google.by\&quot;)))&quot; &quot;(count (parse-page (read-remote-fl \&quot;http://www.codecademy.com/\&quot;)))&quot; &quot;(:trace-redirects (client/get \&quot;http://google.com\&quot;))&quot; &quot;(:trace-redirects (client/get \&quot;http:/onliner.by\&quot;))&quot; &quot;(:trace-redirects (client/get \&quot;http://onliner.by\&quot;))&quot; &quot;(:trace-redirects (client/get \&quot;http://wwww.onliner.by\&quot;))&quot; &quot;(:trace-redirects (client/get \&quot;http://wwww.onliner.by/\&quot;))&quot; &quot;(:status (client/post \&quot;http://google.com\&quot;))&quot; &quot;(contains? \&quot;http://wwww.onliner.by/\&quot; \&quot;http://wwww.onliner.by\&quot;)&quot; &quot;(.contains \&quot;http://wwww.onliner.by/\&quot; \&quot;http://wwww.onliner.by\&quot;)&quot; &quot;(client/get \&quot;fsdfsd\&quot;)&quot; &quot;(client/get \&quot;http://fsdfsd.com\&quot;)&quot; &quot;(client/get \&quot;http://fsdffdfsdfsdasd.com\&quot;)&quot; &quot;(defn [url]\n  (try+\n    (def url-inf (client/get url))\n\n    (catch Object _\n        (println \&quot;yo\&quot;)\n      ))\n    url-inf\n  )&quot; &quot;(defn url-info [url]\n  (try+\n    (def url-inf (client/get url))\n\n    (catch Object _\n        (println \&quot;yo\&quot;)\n      ))\n    url-inf\n  )&quot; &quot;(url-info \&quot;http://sfsdffssdfsdfsdf.com\&quot;)&quot; &quot;(url-info \&quot;http://google.com\&quot;)&quot; &quot;(defn url-info [url]\n  (def url-inf nil)\n  (try+\n    (def url-inf (client/get url))\n\n    (catch Object _\n      (println \&quot;yo\&quot;)\n      ))\n  url-inf\n  )&quot; &quot;(nil? (url-info \&quot;http://sfsdffssdfsdfsdf.com\&quot;))&quot; &quot;(nil? (url-info \&quot;http://google.com\&quot;))&quot; &quot;(:a :b  :c {:a {:b {:c {\&quot;biaka\&quot;}}}})&quot; &quot;({:a {:b {:c {\&quot;biaka\&quot;}}}} :a :b  :c )&quot; &quot;({:a {:b {:c {\&quot;biaka\&quot;}}}}   :c )&quot; &quot;({:a {:b {:c {}}}}   :c )&quot; &quot;({:a {:b {:c \&quot;nilff\&quot;}}}   :c )&quot; &quot;({:a {:b {:c \&quot;nilff\&quot;}}}   :a :b :c )&quot; &quot;([[[2]]]  0 0 0 )&quot; &quot;(get-in {:a {:b {:c {\&quot;nilff\&quot;}}}}   :a :b :c )&quot; &quot;(get-in {:a {:b {:c {\&quot;nilff\&quot;}}}}   [:a :b :c] )&quot; &quot;(get-in {:a {:b {:c {\&quot;nilff\&quot; 1}}}}   [:a :b :c] )&quot; &quot;(get-in {:a {:b {:c {}}}}   [:a :b :c] )&quot; &quot;(assoc-in {:a {:b {:c {}}}}   [:a :b :c]  :k yeap)&quot; &quot;(assoc-in {:a {:b {:c {}}}}   [:a :b :c]  :k \&quot;yeap\&quot;)&quot; &quot;(assoc-in {:a {:b {:c {}}}}   [:a :b :c :k]   \&quot;yeap\&quot;)&quot; &quot;(v (atom {:a {:b {:c {}}}}))&quot; &quot;(def v (atom {:a {:b {:c {}}}}))&quot; &quot;(swap! v assoc-in [:a :b :c :k]   \&quot;yeap\&quot;)&quot; &quot;@v&quot; &quot;(def v (atom {:a {}}))&quot; &quot;(swap! v assoc-in (conj [:a] :descr)   \&quot;yeap\&quot;)&quot; &quot;(assoc-in '(:a :b) [:a] \&quot;tru\&quot;)&quot; &quot;(def urls (atom (reduce #(assoc {} %1 {}) (read-urls (\&quot;resources\\\\urls.txt\&quot;)))))&quot; &quot;(def urls (atom (map #(assoc {} %1 {}) (read-urls (\&quot;resources\\\\urls.txt\&quot;)))))&quot; &quot;(def urls (atom (map #(assoc {} %1 {}) (vec (read-urls (\&quot;resources\\\\urls.txt\&quot;))))))&quot; &quot;(def urls (atom (read-urls (\&quot;resources\\\\urls.txt\&quot;))))&quot; &quot;(read-urls (\&quot;resources\\\\urls.txt\&quot;))&quot; &quot;(def urls (atom (reduce #(assoc {} %1 {}) (read-urls \&quot;resources\\\\urls.txt\&quot;))))&quot; &quot;(def urls (atom (map #(assoc {} %1 {}) (read-urls \&quot;resources\\\\urls.txt\&quot;))))&quot; &quot;(defn read-urls [file-name]\n  (with-open [rdr (reader file-name)]\n    (line-seq rdr) ))&quot; &quot;(defn read-urls [file-name]\n  (with-open [rdr (reader file-name)]\n    (vec (line-seq rdr)) ))&quot; &quot;(map #(assoc {} %1 {}) (read-urls \&quot;resources\\\\urls.txt\&quot;))&quot; &quot;(reduce #(assoc {} %1 {}) (read-urls \&quot;resources\\\\urls.txt\&quot;))&quot; &quot;(reduce (fn [x] ) (read-urls \&quot;resources\\\\urls.txt\&quot;))&quot; &quot;(reduce (fn [{} ] \n          (fn [ur]\n            )) (read-urls \&quot;resources\\\\urls.txt\&quot;))&quot; &quot;(reduce #(assoc {} %1 ) (read-urls \&quot;resources\\\\urls.txt\&quot;))&quot; &quot;(reduce #(assoc {} %1 %2) (read-urls \&quot;resources\\\\urls.txt\&quot;))&quot; &quot;(defn give-map [m])&quot; &quot;(defn give-map [m]\n  (fn [x]\n    (assoc m x {})))&quot; &quot;(defn give-map [m x]  \n    (assoc m x {}))&quot; &quot;(reduce give-map {} (read-urls \&quot;resources\\\\urls.txt\&quot;))&quot; &quot;(reduce (fn [m url]\n          (assoc m url {})) {} (read-urls \&quot;resources\\\\urls.txt\&quot;))&quot; &quot;(+ 1 \&quot;dfd\&quot;)&quot; &quot;(+ (.toString 1) \&quot;dfd\&quot;)&quot; &quot;(+ (str 1)  \&quot;dfd\&quot;)&quot; &quot;(str 1)&quot; &quot;(str 1 \&quot;dfd\&quot;)&quot; &quot;(str 1 \&quot;  \&quot; \&quot;dfd\&quot;)&quot; &quot;(swap! urls  (reduce (fn [m url]\n                       (assoc m url {})) {} (read-urls \&quot;resources\\\\urls.txt\&quot;)))&quot; &quot;(swap! urls  (conj (reduce (fn [m url]\n                             (assoc m url {})) {} (read-urls \&quot;resources\\\\urls.txt\&quot;))))&quot; &quot;(swap! urls  conj (reduce (fn [m url]\n                             (assoc m url {})) {} (read-urls \&quot;resources\\\\urls.txt\&quot;)))&quot; &quot;(def urls (atom {}))&quot; &quot;(swap! urls  conj (reduce (fn [m url]\n                            (assoc m url {})) {} (read-urls \&quot;resources\\\\urls.txt\&quot;)))&quot; &quot;(keys urls)&quot; &quot;(-main )&quot; &quot;(client/get \&quot;http://www.pikabu.ru/\&quot;)&quot; &quot;(keys @urls)&quot; &quot;(assoc-in {:a {}} (\&quot;a\&quot; {} \&quot;b\&quot; {}))&quot; &quot;(assoc-in {:a {}} [:a] (\&quot;a\&quot; {} \&quot;b\&quot; {}))&quot; &quot;(assoc-in {:a {}} [:a] {\&quot;a\&quot; {} \&quot;b\&quot; {}})&quot; &quot;(reduce (fn [m url]\n          (assoc m url {})) {} (parse-page (:body (client/get \&quot;http://google.com\&quot;))))&quot; &quot;(-main \&quot;resources\\\\urls.txt\&quot; 1)&quot; &quot;(:status (client/get \&quot;http://habrahabr.ru/sdfsdfsadfsdf/\&quot;))&quot; &quot;(defn is-working-url [url]\n  (def is-working (atom true))\n  (try+\n    (def url-inf (client/get url))\n    (catch Object _\n      (swap! is-working false)\n      ))\n  @is-working\n  )&quot; &quot;(defn is-working-url [url]\n  (def is-working (atom true))\n  (try+\n    (def url-inf (client/get url))\n    (catch Object _\n      (reset! is-working false)\n      ))\n  @is-working\n  )&quot; &quot;(is-working-url \&quot;fsdfsdfsdfsdf\&quot;)&quot; &quot;(-main 2)&quot; &quot;(-main)&quot; &quot;(is-working-url \&quot;http://google.com\&quot;)&quot; &quot;(is-working-url \&quot;http://habrahabr.ru/sdfsdfsadfsdf/\&quot;)&quot; &quot;(not (is-working-url \&quot;http://google.com\&quot;))&quot; &quot;(defn is-working-url [url]\n  (def cond true)\n  (try+\n    (def url-inf (client/get url))\n    (catch Object _\n      (def cond false)))\n  cond\n  )&quot; &quot;(defn is-working-url [url]\n  (def cond-url true)\n  (try+\n    (def url-inf (client/get url))\n    (catch Object _\n      (def cond-url false)))\n  cond-url\n  )&quot; &quot;@urls&quot; &quot;(-main \&quot;resources\\\\urls.txt\&quot; 2)&quot;], :remote []}}</component>
</project>

